/*
QuillToolbar is deprecated. Consider switching to the official Quill
toolbar format, or providing your own toolbar instead. 
See https://quilljs.com/docs/modules/toolbar
*/

'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _server = require('react-dom/server');

var _server2 = _interopRequireDefault(_server);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _find = require('lodash/find');

var _find2 = _interopRequireDefault(_find);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDomFactories = require('react-dom-factories');

var _reactDomFactories2 = _interopRequireDefault(_reactDomFactories);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultColors = ['rgb(  0,   0,   0)', 'rgb(230,   0,   0)', 'rgb(255, 153,   0)', 'rgb(255, 255,   0)', 'rgb(  0, 138,   0)', 'rgb(  0, 102, 204)', 'rgb(153,  51, 255)', 'rgb(255, 255, 255)', 'rgb(250, 204, 204)', 'rgb(255, 235, 204)', 'rgb(255, 255, 204)', 'rgb(204, 232, 204)', 'rgb(204, 224, 245)', 'rgb(235, 214, 255)', 'rgb(187, 187, 187)', 'rgb(240, 102, 102)', 'rgb(255, 194, 102)', 'rgb(255, 255, 102)', 'rgb(102, 185, 102)', 'rgb(102, 163, 224)', 'rgb(194, 133, 255)', 'rgb(136, 136, 136)', 'rgb(161,   0,   0)', 'rgb(178, 107,   0)', 'rgb(178, 178,   0)', 'rgb(  0,  97,   0)', 'rgb(  0,  71, 178)', 'rgb(107,  36, 178)', 'rgb( 68,  68,  68)', 'rgb( 92,   0,   0)', 'rgb(102,  61,   0)', 'rgb(102, 102,   0)', 'rgb(  0,  55,   0)', 'rgb(  0,  41, 102)', 'rgb( 61,  20,  10)'].map(function (color) {
	return { value: color };
});

var defaultItems = [{ label: 'Formats', type: 'group', items: [{ label: 'Font', type: 'font', items: [{ label: 'Sans Serif', value: 'sans-serif', selected: true }, { label: 'Serif', value: 'serif' }, { label: 'Monospace', value: 'monospace' }] }, { label: 'Size', type: 'size', items: [{ label: 'Small', value: '10px' }, { label: 'Normal', value: '13px', selected: true }, { label: 'Large', value: '18px' }, { label: 'Huge', value: '32px' }] }, { label: 'Alignment', type: 'align', items: [{ label: '', value: '', selected: true }, { label: '', value: 'center' }, { label: '', value: 'right' }, { label: '', value: 'justify' }] }] }, { label: 'Text', type: 'group', items: [{ type: 'bold', label: 'Bold' }, { type: 'italic', label: 'Italic' }, { type: 'strike', label: 'Strike' }, { type: 'underline', label: 'Underline' }, { type: 'color', label: 'Color', items: defaultColors }, { type: 'background', label: 'Background color', items: defaultColors }, { type: 'link', label: 'Link' }] }, { label: 'Blocks', type: 'group', items: [{ type: 'list', value: 'bullet' }, { type: 'list', value: 'ordered' }] }, { label: 'Blocks', type: 'group', items: [{ type: 'image', label: 'Image' }] }];

var QuillToolbar = (0, _createReactClass2.default)({

	displayName: 'Quill Toolbar',

	propTypes: {
		id: _propTypes2.default.string,
		className: _propTypes2.default.string,
		style: _propTypes2.default.object,
		items: _propTypes2.default.array
	},

	getDefaultProps: function getDefaultProps() {
		return {
			items: defaultItems
		};
	},

	componentDidMount: function componentDidMount() {
		console.warn('QuillToolbar is deprecated. Consider switching to the official Quill ' + 'toolbar format, or providing your own toolbar instead. ' + 'See: https://github.com/zenoamaro/react-quill#upgrading-to-react-quill-v1-0-0');
	},

	shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
		return !(0, _isEqual2.default)(nextProps, this.props);
	},

	renderGroup: function renderGroup(item, key) {
		return _reactDomFactories2.default.span({
			key: item.label || key,
			className: 'ql-formats' }, item.items.map(this.renderItem));
	},

	renderChoiceItem: function renderChoiceItem(item, key) {
		return _reactDomFactories2.default.option({
			key: item.label || item.value || key,
			value: item.value }, item.label);
	},

	renderChoices: function renderChoices(item, key) {
		var choiceItems = item.items.map(this.renderChoiceItem);
		var selectedItem = (0, _find2.default)(item.items, function (item) {
			return item.selected;
		});
		var attrs = {
			key: item.label || key,
			title: item.label,
			className: 'ql-' + item.type,
			value: selectedItem.value
		};
		return _reactDomFactories2.default.select(attrs, choiceItems);
	},

	renderButton: function renderButton(item, key) {
		return _reactDomFactories2.default.button({
			type: 'button',
			key: item.label || item.value || key,
			value: item.value,
			className: 'ql-' + item.type,
			title: item.label }, item.children);
	},

	renderAction: function renderAction(item, key) {
		return _reactDomFactories2.default.button({
			key: item.label || item.value || key,
			className: 'ql-' + item.type,
			title: item.label }, item.children);
	},

	/* jshint maxcomplexity: false */
	renderItem: function renderItem(item, key) {
		switch (item.type) {
			case 'group':
				return this.renderGroup(item, key);
			case 'font':
			case 'header':
			case 'align':
			case 'size':
			case 'color':
			case 'background':
				return this.renderChoices(item, key);
			case 'bold':
			case 'italic':
			case 'underline':
			case 'strike':
			case 'link':
			case 'list':
			case 'bullet':
			case 'ordered':
			case 'indent':
			case 'image':
			case 'video':
				return this.renderButton(item, key);
			default:
				return this.renderAction(item, key);
		}
	},

	getClassName: function getClassName() {
		return 'quill-toolbar ' + (this.props.className || '');
	},

	render: function render() {
		var children = this.props.items.map(this.renderItem);
		var html = children.map(_server2.default.renderToStaticMarkup).join('');
		return _reactDomFactories2.default.div({
			id: this.props.id,
			className: this.getClassName(),
			style: this.props.style,
			dangerouslySetInnerHTML: { __html: html }
		});
	}

});

QuillToolbar.defaultItems = defaultItems;
QuillToolbar.defaultColors = defaultColors;

exports.default = QuillToolbar;
module.exports = exports['default'];